(undo-tree-save-format-version . 1)
"6aa010c0d4d2fc2b121abef4c82feae39d72c081"
[nil nil nil nil (25888 59298 285940 446000) 0 nil]
([nil nil ((1575 . 1585) ("c" . -1575) ("a" . -1576) ("t" . -1577) 1578 (1577 . 1578) ("p" . -1577) 1578 (1575 . 1578) ("doom-tokyo-night" . 1575) 1590 (t 25870 35980 167745 900000)) nil (25888 59298 285939 614000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1671 . 1672) (nil fontified nil 1584 . 1672) (1584 . 1672) 1583 (t 25870 36037 47960 174000)) nil (25888 59298 285938 755000) 0 nil])
([nil nil (("(setq catppuccin-flavor 'frappe) ;; or 'latte, 'macchiato, or 'mocha
(catppuccin-reload)" . 1584) (nil fontified t 1620 . 1653) (nil fontified t 1617 . 1620) (nil fontified t 1616 . 1617) (nil fontified t 1615 . 1616) (nil fontified t 1609 . 1615) (nil fontified t 1608 . 1609) (nil fontified t 1607 . 1608) (nil fontified t 1590 . 1607) (nil fontified t 1589 . 1590) (nil fontified t 1585 . 1589) (nil fontified t 1584 . 1585) (nil rear-nonsticky t 1671 . 1672)) nil (25888 59298 285937 978000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1674 . 1675) (nil fontified nil 1587 . 1675) (1587 . 1675) (t 25870 36037 47960 174000)) nil (25888 59298 285937 196000) 0 nil])
([nil nil ((1615 . 1617) ("a" . -1615) 1616 (1612 . 1616) ("frappe" . 1612) 1617) nil (25888 59298 285936 581000) 0 nil])
([nil nil ((1612 . 1618) ("moca" . 1612) (1615 . 1616) ("ha" . 1615) (t 25870 36077 408114 684000)) nil (25888 59298 285936 12000) 0 nil])
([nil nil (("o" . 1623)) nil (25888 59298 285935 524000) 0 nil])
([nil nil (("r" . 1623)) nil (25888 59298 285935 287000) 0 nil])
([nil nil ((1623 . 1630) ("/" . -1623) 1624 (1623 . 1624)) nil (25888 59298 285934 773000) 0 nil])
([nil nil ((1630 . 1631)) nil (25888 59298 285934 245000) 0 nil])
([nil nil ((1612 . 1621) ("frappe" . 1612) 1617 (t 25870 36096 601522 159000)) nil (25888 59298 285933 855000) 0 nil])
([nil nil ((1612 . 1617) ("macchiato" . 1612) (t 25870 36114 518258 403000)) nil (25888 59298 285933 222000) 0 nil])
([nil nil ((2111 . 2112) ("3" . 2111) (t 25870 36123 328292 743000)) nil (25888 59298 285932 764000) 0 nil])
([nil nil ((2111 . 2112) ("2" . 2111) (t 25870 36180 168516 188000)) nil (25888 59298 285932 427000) 0 nil])
([nil nil ((3344 . 3345) (t 25870 36217 465565 279000) 3343) nil (25888 59298 285931 996000) 0 nil])
([nil nil (("
" . 3345)) nil (25888 59298 285931 665000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3345 . 3346) ("
" . -3406) (3344 . 3407) 3283) nil (25888 59298 285931 311000) 0 nil])
([nil nil ((3388 . 3391) ("t" . -3388) ("a" . -3389) ("b" . -3390) 3391 (3388 . 3391) ("/" . 3388)) nil (25888 59298 285930 684000) 0 nil])
([nil nil ((3395 . 3418) ("+workspace/switch-rig" . -3395) 3416 (3406 . 3416) ("w" . -3406) 3407 (3406 . 3407) (3395 . 3406) ("comment-line" . 3395) 3406) nil (25888 59298 285929 895000) 0 nil])
([nil nil (("
" . -3494) (3419 . 3495) 3417) nil (25888 59298 285929 80000) 0 nil])
([nil nil ((3464 . 3466) ("ab" . 3464) 3465) nil (25888 59298 285928 682000) 0 nil])
([nil nil ((3389 . 3391) ("ab" . 3389) 3390) nil (25888 59298 285928 334000) 0 nil])
([nil nil ((3465 . 3470) (3464 . 3465) (3463 . 3464)) nil (25888 59298 285927 978000) 0 nil])
([nil nil (("TAB" . 3470) 3472) nil (25888 59298 285927 650000) 0 nil])
([nil nil ((3464 . 3467) ("S" . 3464) (t 25870 37094 759480 932000)) nil (25888 59298 285927 327000) 0 nil])
([nil nil ((3468 . 3472)) nil (25888 59298 285927 25000) 0 nil])
([nil nil ((3388 . 3397) ("TAB" . 3388) 3390) nil (25888 59298 285926 640000) 0 nil])
([nil nil (("left" . 3389) 3392 (t 25870 37148 466498 184000)) nil (25888 59298 285926 145000) 0 nil])
([nil nil (("<" . 3388)) nil (25888 59298 285925 746000) 0 nil])
([nil nil ((3386 . 3387)) nil (25888 59298 285925 404000) 0 nil])
([nil nil ((3500 . 3504) ("right" . 3500) 3504 (t 25870 37226 673666 272000)) nil (25888 59298 285924 968000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2487 . 2488) (nil fontified nil 2402 . 2488) (2402 . 2488) 2401 (t 25870 37263 663900 72000)) nil (25888 59298 285924 534000) 0 nil])
([nil nil (("(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override \"main\")
  )" . 2402) (nil fontified t 2484 . 2485) (nil fontified t 2483 . 2484) (nil fontified t 2477 . 2483) (nil fontified t 2476 . 2477) (nil fontified t 2429 . 2476) (nil fontified t 2428 . 2429) (nil fontified t 2424 . 2428) (nil fontified t 2423 . 2424) (nil fontified t 2420 . 2423) (nil fontified t 2410 . 2420) (nil fontified t 2409 . 2410) (nil fontified t 2403 . 2409) (nil fontified t 2402 . 2403) (nil rear-nonsticky t 2487 . 2488)) nil (25888 59298 285923 812000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2511 . 2512) (nil fontified nil 2426 . 2512) (2426 . 2512) 2425 (t 25870 37263 663900 72000)) nil (25888 59298 285922 819000) 0 nil])
([nil nil ((";" . 2425)) nil (25888 59298 285922 331000) 0 nil])
([nil nil ((2552 . 2553) (2511 . 2552)) nil (25888 59298 285922 83000) 0 nil])
([nil nil (("                                        " . 2512)) nil (25888 59298 285921 731000) 0 nil])
([nil nil ((1660 . 1661) ("
" . -1660) 1591 (t 25870 37373 367915 804000)) nil (25888 59298 285921 444000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1661 . 1662) (1660 . 1661) (" " . 1660)) nil (25888 59298 285921 11000) 0 nil])
([nil nil ((2512 . 2552) (t 25870 37373 367915 804000)) nil (25888 59298 285920 676000) 0 nil])
([nil nil ((1587 . 1590)) nil (25888 59298 285920 342000) 0 nil])
([nil nil ((1664 . 1667)) nil (25888 59298 285920 58000) 0 nil])
([nil nil (("(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override \"main\")
  )
" . 2431) 2517 (t 25870 37901 244379 798000)) nil (25888 59298 285919 708000) 0 nil])
([nil nil (("                                        " . 2431) 2470) nil (25888 59298 285919 338000) 0 nil])
([nil nil ((2117 . 2118) ("3" . 2117) (t 25870 37939 944602 923000)) nil (25888 59298 285918 918000) 0 nil])
([nil nil (("(after! evil-snipe
  (evil-snipe-mode -1))
" . 2388) 2410 (t 25870 48372 408153 46000)) nil (25888 59298 285918 554000) 0 nil])
([nil nil ((789 . 798) (";;
;; See" . 789) (t 25870 54795 133000 603000)) nil (25888 59298 285918 54000) 0 nil])
([nil nil ((386 . 394) ("
;; Doom" . 386)) nil (25888 59298 285917 705000) 0 nil])
([nil nil (("
" . 398) (395 . 398) (395 . 396) (" " . 395) (394 . 395)) nil (25888 59298 285917 268000) 0 nil])
([nil nil ((386 . 387)) nil (25888 59298 285916 862000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3473 . 3474) ("
" . -3556) (3472 . 3557) 3389) nil (25888 59298 285916 516000) 0 nil])
([nil nil ((3533 . 3550) ("evil-window-ri" . -3533) 3547 (3540 . 3547) (3533 . 3540) ("+workspace/switch-left" . 3533) 3554) nil (25888 59298 285916 27000) 0 nil])
([nil nil ((3516 . 3517) ("l" . -3516) 3517 (3514 . 3517) ("C-<iso-lefttab>" . 3514) 3528) nil (25888 59298 285915 292000) 0 nil])
([nil nil (("
" . -3606) (3539 . 3607) 3516) nil (25888 59298 285914 610000) 0 nil])
([nil nil (("
" . -3673) (3606 . 3674) 3569) nil (25888 59298 285914 199000) 0 nil])
([nil nil (("
" . -3740) (3673 . 3741) 3608) nil (25888 59298 285913 834000) 0 nil])
([nil nil (("j" . -3605) 3606 (3605 . 3606) ("j" . -3605) (3600 . 3606) ("right" . 3600) 3604) nil (25888 59298 285913 303000) 0 nil])
([nil nil (("e" . 3603)) nil (25888 59298 285912 792000) 0 nil])
([nil nil ((3666 . 3668) ("right" . 3666)) nil (25888 59298 285912 538000) 0 nil])
([nil nil ((3730 . 3734) ("right" . 3730) 3734) nil (25888 59298 285912 249000) 0 nil])
([nil nil ((3583 . 3584) ("l" . 3583)) nil (25888 59298 285911 865000) 0 nil])
([nil nil ((3649 . 3650) ("l" . 3649)) nil (25888 59298 285911 567000) 0 nil])
([nil nil ((3713 . 3714) ("l" . 3713)) nil (25888 59298 285911 196000) 0 nil])
([nil nil (("
" . -3801) (3735 . 3802) 3713 (t 25871 18493 122630 69000)) nil (25888 59298 285910 853000) 0 nil])
([nil nil ((3784 . 3799) ("evil-window-down" . 3784) 3799) nil (25888 59298 285910 434000) 0 nil])
([nil nil ((3784 . 3814) ("+evil/w" . -3784) 3791 (3790 . 3791) ("e" . -3790) ("v" . -3791) 3792 (3784 . 3792) ("evil-window-vsp" . 3784) 3798) nil (25888 59298 285909 864000) 0 nil])
([nil nil ((3779 . 3782) ("r" . -3779) ("e" . -3780) ("t" . -3781) 3782 (3779 . 3782) ("j" . 3779)) nil (25888 59298 285908 987000) 0 nil])
([nil nil ((3781 . 3782) (t 25871 18556 829466 504000)) nil (25888 59298 285908 479000) 0 nil])
([nil nil ((" " . 3781) 3782) nil (25888 59298 285908 135000) 0 nil])
([nil nil ((3781 . 3782)) nil (25888 59298 285907 864000) 0 nil])
([nil nil ((" " . 3781) 3782) nil (25888 59298 285907 619000) 0 nil])
([nil nil ((3781 . 3782)) nil (25888 59298 285907 331000) 0 nil])
([nil nil ((" " . 3781) 3782) nil (25888 59298 285906 993000) 0 nil])
([nil nil (("
" . -3899) (3817 . 3900) 3782) nil (25888 59298 285906 679000) 0 nil])
([nil nil (("v" . 3881)) nil (25888 59298 285906 151000) 0 nil])
([nil nil ((3861 . 3864) ("RET" . 3861) 3863) nil (25888 59298 285905 868000) 0 nil])
([nil nil ((3539 . 3540) (" " . 3539) ("
" . -3539) 3528 (t 25871 18579 186193 478000)) nil (25888 59298 285905 454000) 0 nil])
([nil nil ((nil ws-butler-chg delete 3540 . 3541) (3539 . 3540) (nil ws-butler-chg delete 3540 . 3541) (3539 . 3540) (" " . 3539)) nil (25888 59298 285904 972000) 0 nil])
([nil nil ((apply -18 3473 3918 undo--wrap-and-run-primitive-undo 3473 3918 ((3834 . 3837) (3749 . 3752) (3680 . 3683) (3613 . 3616) (3544 . 3547) (3474 . 3477)))) nil (25888 59298 285904 466000) 0 nil])
([nil nil ((apply 3 3833 3913 undo--wrap-and-run-primitive-undo 3833 3913 ((";; " . -3834) 3891))) nil (25888 59298 285904 203000) 0 nil])
([nil nil ((apply -3 3833 3917 undo--wrap-and-run-primitive-undo 3833 3917 ((3834 . 3837) 3891))) nil (25888 59298 285903 928000) 0 nil])
([nil nil ((apply 3 3473 3539 undo--wrap-and-run-primitive-undo 3473 3539 ((";; " . -3474) 3531))) nil (25888 59298 285903 282000) 0 nil])
([nil nil ((3608 . 3609) (" ;; " . 3608) (3612 . 3612) (3608 . 3609) (" " . 3608) ("
" . -3608) 3598) nil (25888 59298 285902 706000) 0 nil])
([nil nil ((nil ws-butler-chg delete 3609 . 3610) (3608 . 3609) (nil ws-butler-chg delete 3609 . 3610) (3608 . 3609) (" " . 3608) (nil ws-butler-chg delete 3612 . 3613) (3608 . 3612) (" " . 3608)) nil (25888 59298 285902 60000) 0 nil])
([nil nil ((3608 . 3609) (" ;; " . 3608) (3612 . 3612) (3608 . 3609) (" " . 3608) ("
" . -3608) 3598) nil (25888 59298 285901 381000) 0 nil])
([nil nil ((nil ws-butler-chg delete 3609 . 3610) (3608 . 3609) (nil ws-butler-chg delete 3609 . 3610) (3608 . 3609) (" " . 3608) (nil ws-butler-chg delete 3612 . 3613) (3608 . 3612) (" " . 3608)) nil (25888 59298 285900 611000) 0 nil])
([nil nil ((apply 15 3540 3899 undo--wrap-and-run-primitive-undo 3540 3899 ((";; " . -3819) (";; " . -3737) (";; " . -3671) (";; " . -3607) (";; " . -3541) 3914))) nil (25888 59298 285900 20000) 0 nil])
([nil nil ((apply -3 3818 3902 undo--wrap-and-run-primitive-undo 3818 3902 ((3819 . 3822) 3873))) nil (25888 59298 285899 791000) 0 nil])
([nil nil ((apply 3 3818 3898 undo--wrap-and-run-primitive-undo 3818 3898 ((";; " . -3819) 3873))) nil (25888 59298 285899 557000) 0 nil])
([nil nil ((apply -18 3473 3917 undo--wrap-and-run-primitive-undo 3473 3917 ((3834 . 3837) (3749 . 3752) (3680 . 3683) (3613 . 3616) (3544 . 3547) (3474 . 3477) 3473))) nil (25888 59298 285899 331000) 0 nil])
([nil nil ((1897 . 1903) (1883 . 1897) ("q" . -1883) 1884 (1881 . 1884) (1880 . 1882) ("(" . -1880) (1880 . 1881) (1879 . 1880) (t 25871 18700 893194 252000) 1873) nil (25888 59298 285898 695000) 0 nil])
([nil nil (("(setq default-tab-width)
" . 1880) 1902) nil (25888 59298 285897 859000) 0 nil])
([nil nil ((apply 18 3473 3899 undo--wrap-and-run-primitive-undo 3473 3899 ((";; " . -3819) (";; " . -3737) (";; " . -3671) (";; " . -3607) (";; " . -3541) (";; " . -3474) 3917))) nil (25888 59298 285897 512000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3869 . 3870) (nil fontified nil 3836 . 3870) (3836 . 3870) 3835 (t 25871 64082 566412 738000)) nil (25888 59298 285897 111000) 0 nil])
([nil nil (("(setq select-enable-clipboard nil)" . 3836) (nil rear-nonsticky t 3869 . 3870)) nil (25888 59298 285896 246000) 0 nil])
([nil nil ((3898 . 3899) (t 25871 64082 566412 738000) 3835) nil (25888 59298 285895 893000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3932 . 3933) (nil fontified nil 3899 . 3933) (3899 . 3933)) nil (25888 59298 285895 372000) 0 nil])
([nil nil (3932) nil (25888 59298 285895 54000) 0 nil])
([nil nil ((3899 . 3900)) nil (25888 59298 285894 760000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3935 . 3936) ("
" . -4015) (3934 . 4016) 3899 (t 25871 64100 288884 19000)) nil (25888 59298 285894 459000) 0 nil])
([nil nil ((" (define-key evil-normal-state-map (kbd \"M-SPC\") '+evil/window-split-and-follow)
" . 3935) 3936) nil (25888 59298 285893 963000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3935 . 3936) ("
" . -4018) (3934 . 4019) 3899 (t 25871 64108 764826 861000)) nil (25888 59298 285893 627000) 0 nil])
([nil nil ((" (define-key evil-normal-state-map (kbd \"C-<iso-lefttab>\") '+workspace/switch-left)
" . 3935) 3936) nil (25888 59298 285893 190000) 0 nil])
([nil nil ((3935 . 3940)) nil (25888 59298 285892 922000) 0 nil])
([nil nil (("thing
" . 3935) 3939) nil (25888 59298 285892 618000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3899 . 3900) ("
" . -3979) (3898 . 3980) 3822 (t 25871 64182 469042 122000)) nil (25888 59298 285892 174000) 0 nil])
([nil nil ((3940 . 3945) ("M-SPC" . 3940) 3944) nil (25888 59298 285891 619000) 0 nil])
([nil nil ((3949 . 3951) ("c" . -3949) ("o" . -3950) ("p" . -3951) ("y" . -3952) 3953 (3949 . 3953) ("+evil/window-split-and-follow" . 3949) 3977) nil (25888 59298 285890 883000) 0 nil])
([nil nil (("
" . -4006) (3952 . 4007) 3950) nil (25888 59298 285890 166000) 0 nil])
([nil nil ((" (define-key evil-normal-state-map (kbd \"C-S-v\") 'mx)
" . 3953) 3954) nil (25888 59298 285889 853000) 0 nil])
([nil nil (("
" . -4042) (3988 . 4043) 3973) nil (25888 59298 285889 536000) 0 nil])
([nil nil (("
 (define-key evil-normal-state-map (kbd \"C-S-v\") 'mx)
" . 3988) (nil ws-butler-chg delete 4043 . 4044) (4042 . 4043)) nil (25888 59298 285889 77000) 0 nil])
([nil nil (("
" . -4042) (3988 . 4043) 3990) nil (25888 59298 285888 550000) 0 nil])
([nil nil ((" (define-key evil-normal-state-map (kbd \"C-S-v\") 'mx)
" . 3989) 3990) nil (25888 59298 285888 193000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3960 . 3961) (nil fontified nil 3955 . 3961) (3955 . 3961) 3990) nil (25888 59298 285887 574000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3966 . 3967) (nil fontified nil 3961 . 3967) (3961 . 3967) 3960) nil (25888 59298 285887 158000) 0 nil])
([nil nil (("enable" . 3961) (nil rear-nonsticky t 3966 . 3967)) nil (25888 59298 285886 647000) 0 nil])
([nil nil (("enable" . 3955) (nil rear-nonsticky t 3960 . 3961)) nil (25888 59298 285886 297000) 0 nil])
([nil nil (("
" . -4042) (3988 . 4043) 3990) nil (25888 59298 285885 739000) 0 nil])
([nil nil ((" (define-key evil-normal-state-map (kbd \"C-S-v\") 'mx)
" . 3989) 3990) nil (25888 59298 285885 270000) 0 nil])
([nil nil (("
" . -4042) (3988 . 4043) 3990) nil (25888 59298 285884 839000) 0 nil])
([nil nil ((" (define-key evil-normal-state-map (kbd \"C-S-v\") 'mx)
" . 3989) 3990) nil (25888 59298 285884 459000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4043 . 4044) (3990 . 4044)) nil (25888 59298 285884 0) 0 nil])
([nil nil ((" (define-key evil-normal-state-map (kbd \"C-S-v\") 'mx)
" . 3990) (nil rear-nonsticky t 4043 . 4044)) nil (25888 59298 285883 731000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3961 . 3962) (nil fontified nil 3954 . 3962) (3954 . 3962)) nil (25888 59298 285883 263000) 0 nil])
([nil nil (("iwvevjeh" . 3954) (nil rear-nonsticky t 3961 . 3962)) nil (25888 59298 285882 929000) 0 nil])
([nil nil ((3949 . 3963) ("clipb" . -3949) 3954 (3952 . 3954) (3949 . 3952) ("mx" . 3949) 3950) nil (25888 59298 285882 371000) 0 nil])
([nil nil (("S" . 3942) (t 25871 64692 552458 187000)) nil (25888 59298 285881 800000) 0 nil])
([nil nil (("-" . 3942)) nil (25888 59298 285881 430000) 0 nil])
([nil nil ((3942 . 3943) ("v" . 3942)) nil (25888 59298 285881 150000) 0 nil])
([nil nil ((3922 . 3923) (3917 . 3922) ("normal" . 3917) 3922 (t 25871 64735 290038 788000)) nil (25888 59298 285880 409000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3963 . 3964) ("
" . -4026) (3962 . 4027) 3922 (t 25871 64745 307361 455000)) nil (25888 59298 285879 929000) 0 nil])
([nil nil ((3981 . 3987) ("insert" . 3981) 3986) nil (25888 59298 285879 276000) 0 nil])
([nil nil ((4004 . 4005) ("C" . 4004)) nil (25888 59298 285878 885000) 0 nil])
([nil nil ((4004 . 4007) ("M" . 4004) (t 25871 64755 447914 529000)) nil (25888 59298 285878 469000) 0 nil])
([nil nil ((4008 . 4009) ("V" . 4008)) nil (25888 59298 285878 114000) 0 nil])
([nil nil (("\"" . 4003) (t 25871 64875 835085 878000)) nil (25888 59298 285877 726000) 0 nil])
([nil nil (("-" . 4006)) nil (25888 59298 285877 446000) 0 nil])
([nil nil ((4006 . 4007)) nil (25888 59298 285877 170000) 0 nil])
([nil nil ((4003 . 4004) (t 25871 64893 361190 142000)) nil (25888 59298 285876 868000) 0 nil])
([nil nil ((4007 . 4008) (" " . 4007)) nil (25888 59298 285876 514000) 0 nil])
([nil nil (("-" . 4007) (t 25871 64947 398854 225000)) nil (25888 59298 285876 91000) 0 nil])
([nil nil ((4007 . 4008)) nil (25888 59298 285875 820000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4029 . 4030) ("
" . -4094) (4028 . 4095) 3997 (t 25871 64978 453863 120000)) nil (25888 59298 285875 489000) 0 nil])
([nil nil ((4074 . 4075) ("v" . 4074)) nil (25888 59298 285875 19000) 0 nil])
([nil nil ((4079 . 4093) ("kill-ring" . -4079) 4088 (4085 . 4088) (4079 . 4085) ("clipboard-yank" . 4079) 4092) nil (25888 59298 285874 479000) 0 nil])
([nil nil ((4080 . 4089) ("i" . -4080) 4081 (4079 . 4081)) nil (25888 59298 285873 815000) 0 nil])
([nil nil ((4084 . 4086) ("ao" . 4084) 4085) nil (25888 59298 285873 416000) 0 nil])
([nil nil ((apply -12 3899 4153 undo--wrap-and-run-primitive-undo 3899 4153 ((4115 . 4118) (4036 . 4039) (3967 . 3970) (3900 . 3903) 3899))) nil (25888 59298 285872 682000) 0 nil])
([nil nil ((apply 3 3899 3962 undo--wrap-and-run-primitive-undo 3899 3962 ((";; " . -3900) 3899))) nil (25888 59298 285872 476000) 0 nil])
([nil nil ((apply -3 3899 3965 undo--wrap-and-run-primitive-undo 3899 3965 ((3900 . 3903) 170))) nil (25888 59298 285872 261000) 0 nil])
([nil nil ((apply 3 3899 3962 undo--wrap-and-run-primitive-undo 3899 3962 ((";; " . 3900) 3899))) nil (25888 59298 285872 11000) 0 nil])
([nil nil ((apply -6 3736 3905 undo--wrap-and-run-primitive-undo 3736 3905 ((3822 . 3825) (3737 . 3740) 3899))) nil (25888 59298 285871 789000) 0 nil])
([nil nil ((apply -12 3473 3748 undo--wrap-and-run-primitive-undo 3473 3748 ((3680 . 3683) (3613 . 3616) (3544 . 3547) (3474 . 3477) 3473))) nil (25888 59298 285871 483000) 0 nil])
([nil nil ((3833 . 3897) ("
" . -3916) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3917)) nil (25888 59298 285871 175000) 0 nil])
([nil nil ((3748 . 3812) ("
" . -3832) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3833)) nil (25888 59298 285870 737000) 0 nil])
([nil nil ((3679 . 3743) ("
" . -3747) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3748)) nil (25888 59298 285870 392000) 0 nil])
([nil nil ((3612 . 3676) ("
" . -3678) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3679)) nil (25888 59298 285869 962000) 0 nil])
([nil nil ((3543 . 3607) ("
" . -3611) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3612)) nil (25888 59298 285869 463000) 0 nil])
([nil nil ((3473 . 3537) ("
" . -3542) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3543)) nil (25888 59298 285868 886000) 0 nil])
([nil nil ((3389 . 3453) ("
" . -3472) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3473)) nil (25888 59298 285868 428000) 0 nil])
([nil nil ((3472 . 3536) ("
" . 3389) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3389)) nil (25888 59298 285868 18000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2250 . 2251) (nil fontified nil 2196 . 2251) (2196 . 2251) (2195 . 2196) (t 25873 36860 641089 116000) 2124) nil (25888 59298 285867 590000) 0 nil])
([nil nil ((2228 . 2229) ("1" . 2228) (t 25873 43394 537893 337000)) nil (25888 59298 285867 60000) 0 nil])
([nil nil ((2229 . 2230)) nil (25888 59298 285866 760000) 0 nil])
([nil nil ((2250 . 2252) ("1" . 2250)) nil (25888 59298 285866 423000) 0 nil])
([nil nil ((2210 . 2212) ("left" . 2210) 2213 (t 25873 43417 575107 530000)) nil (25888 59298 285865 952000) 0 nil])
([nil nil ((2219 . 2220) ("n" . -2219) ("-" . -2220) ("w" . -2221) 2222 ("i" . -2222) ("d" . -2223) 2224 (2210 . 2224) ("to-margin-width" . 2210) 2224) nil (25888 59298 285865 330000) 0 nil])
([nil nil (("top-margin" . 2210) 2219 (t 25873 43450 769237 964000)) nil (25888 59298 285864 377000) 0 nil])
([nil nil (("(setq-default  20 right-margin-width 20)
" . 2196) 2210) nil (25888 59298 285863 945000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2237 . 2238) (nil fontified nil 2196 . 2238) (2196 . 2238) (2195 . 2196) (t 25873 43504 227207 217000) 2138) nil (25888 59298 285863 505000) 0 nil])
([nil nil ((2237 . 2241)) nil (25888 59298 285863 53000) 0 nil])
([nil nil (("1" . 2238) (t 25873 43586 749259 23000)) nil (25888 59298 285862 799000) 0 nil])
([nil nil ((" " . 2238)) nil (25888 59298 285862 381000) 0 nil])
([nil nil (("1" . 2238)) nil (25888 59298 285862 98000) 0 nil])
([nil nil ((" " . 2237)) nil (25888 59298 285861 813000) 0 nil])
([nil nil ((apply -3 2196 2242 undo--wrap-and-run-primitive-undo 2196 2242 ((2196 . 2199) 2237))) nil (25888 59298 285861 544000) 0 nil])
([nil nil ((2121 . 2122) ("2" . 2121) (t 25873 43618 970072 241000)) nil (25888 59298 285861 129000) 0 nil])
([nil nil ((2093 . 2099) ("g" . -2093) 2094 (2089 . 2094) ("E" . -2089) ("S" . -2090) 2091 (2088 . 2091) ("JetBrains Mono Nerd Font" . 2088) 2111 (t 25874 57747 332100 620000)) nil (25888 59298 285860 512000) 0 nil])
([nil nil ((2108 . 2109) ("3" . 2108) (t 25875 31001 724519 299000)) nil (25888 59298 285859 819000) 0 nil])
([nil nil ((2108 . 2109) ("2" . 2108) (t 25875 31084 736112 434000)) nil (25888 59298 285859 408000) 0 nil])
([nil nil ((2155 . 2166) ("JetBrains Mono Nerd Font" . 2155) 2178 (t 25875 31112 576560 171000)) nil (25888 59298 285858 932000) 0 nil])
([nil nil ((2167 . 2176) (t 25875 31312 938003 281000)) nil (25888 59298 285858 405000) 0 nil])
([nil nil ((2174 . 2175) ("r" . 2174) (2174 . 2175) ("1" . 2174) (t 25875 31352 688051 31000)) nil (25888 59298 285857 960000) 0 nil])
([nil nil ((2174 . 2176) ("13" . 2174) 2175 (t 25875 31357 478059 630000)) nil (25888 59298 285857 442000) 0 nil])
([nil nil ((":size 20" . 2168) 2175 (t 25875 31373 968093 207000)) nil (25888 59298 285856 999000) 0 nil])
([nil nil ((" " . 2167)) nil (25888 59298 285856 568000) 0 nil])
([nil nil ((2171 . 2174) ("O" . -2171) ("n" . -2172) ("t" . -2173) 2174 (2158 . 2174) ("b" . -2158) 2159 (2158 . 2159) (2155 . 2158) ("MesloLGS NF" . 2155) 2165) nil (25888 59298 285855 998000) 0 nil])
([nil nil ((2165 . 2170) (t 25875 31404 484836 253000)) nil (25888 59298 285855 119000) 0 nil])
([nil nil (("MesloLGS NF" . 2088) 2098 (t 25875 31438 864940 246000)) nil (25888 59298 285854 746000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2111 . 2112) (nil fontified nil 2088 . 2112) (2088 . 2112)) nil (25888 59298 285854 353000) 0 nil])
([nil nil ((2110 . 2111) ("n" . 2110) (t 25875 33135 360077 216000)) nil (25888 59298 285853 942000) 0 nil])
([nil nil ((2110 . 2111) ("r" . 2110)) nil (25888 59298 285853 545000) 0 nil])
([nil nil ((4717 . 4726) ("fullboth" . 4717) 4724 (t 25875 33143 710089 527000)) nil (25888 59298 285853 148000) 0 nil])
([nil nil ((2222 . 2226) (2202 . 2222) ("vi-" . -2202) 2205 (2201 . 2205) (2197 . 2201) (2196 . 2198) ("(" . -2196) (2196 . 2197) (2195 . 2196) (t 25875 34110 42260 574000) 2181) nil (25888 59298 285852 570000) 0 nil])
([nil nil (("(setq vi-tilde-fringe-mode nil)
" . 2196) 2223 (t 25875 34232 549255 817000)) nil (25888 59298 285851 675000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2195 . 2196) ("
" . -2225) (2195 . 2226) 2124 (t 25875 34367 246289 316000)) nil (25888 59298 285851 81000) 0 nil])
([nil nil ((2202 . 2218) ("org-directory" . 2202) 2214) nil (25888 59298 285850 404000) 0 nil])
([nil nil ((2220 . 2227) ("~/org/" . 2220) 2225) nil (25888 59298 285850 31000) 0 nil])
([nil nil ((2220 . 2221) ("default" . 2220) 2226 (t 25875 34703 290555 326000)) nil (25888 59298 285849 614000) 0 nil])
([nil nil (("0" . 2220)) nil (25888 59298 285849 110000) 0 nil])
([nil nil ((2220 . 2230)) nil (25888 59298 285848 541000) 0 nil])
([nil nil (("`" . -2217) 2218 (2213 . 2218) ("style" . 2213) 2217 (t 25875 34764 924061 619000)) nil (25888 59298 285848 3000) 0 nil])
([nil nil ((2219 . 2220) ("no-fringes" . 2219) 2228) nil (25888 59298 285847 369000) 0 nil])
([nil nil (("(setq set-fringe-mode \"0\")
" . 2196) 2200 (t 25875 34825 827566 283000)) nil (25888 59298 285846 960000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2526 . 2527) (2500 . 2527) (nil rear-nonsticky nil 2499 . 2500) (2473 . 2500) ("
" . 2473) (2470 . 2473) (2469 . 2471) (t 25875 34863 61004 549000) 2442) nil (25888 59298 285846 405000) 0 nil])
([nil nil (("(setq set-fringe-mode \"0\")
" . 2500)) nil (25888 59298 285845 762000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2500 . 2501) ("
" . -2527) (2500 . 2528)) nil (25888 59298 285845 440000) 0 nil])
([nil nil (("(setq set-fringe-mode \"0\")
" . 2501)) nil (25888 59298 285845 41000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2503 . 2504) ("
" . -2530) (2503 . 2531) 2501) nil (25888 59298 285844 601000) 0 nil])
([nil nil (("(setq set-fringe-mode \"0\")
" . 2504)) nil (25888 59298 285844 133000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2556 . 2557) (nil fontified nil 2505 . 2557) (2505 . 2557) 2504) nil (25888 59298 285843 750000) 0 nil])
([nil nil (("(remove-hook 'text-mode-hook #'vi-tilde-fringe-mode)" . 2505) (nil rear-nonsticky t 2556 . 2557)) nil (25888 59298 285843 158000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2551 . 2552) (nil fontified nil 2500 . 2552) (2500 . 2552)) nil (25888 59298 285842 784000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2552 . 2553) ("
" . -2605) (2552 . 2606) 2539) nil (25888 59298 285842 322000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2605 . 2606) ("
" . -2658) (2605 . 2659) 2553) nil (25888 59298 285841 824000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2658 . 2659) ("
" . -2711) (2658 . 2712) 2606) nil (25888 59298 285841 411000) 0 nil])
([nil nil (("(remove-hook 'text-mode-hook #'vi-tilde-fringe-mode)
" . 2553) 2566) nil (25888 59298 285840 728000) 0 nil])
([nil nil ((2567 . 2571) ("text" . 2567) 2570) nil (25888 59298 285840 369000) 0 nil])
([nil nil ((2620 . 2624) ("text" . 2620) 2623) nil (25888 59298 285839 913000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3772 . 3773) ("
" . -3835) (3771 . 3836) 3751 (t 25875 35210 666172 863000)) nil (25888 59298 285839 428000) 0 nil])
([nil nil ((3790 . 3796) ("insert" . 3790) 3795) nil (25888 59298 285838 951000) 0 nil])
([nil nil ((3624 . 3688) ("
" . -3707) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3708) 3731) nil (25888 59298 285838 539000) 0 nil])
([nil nil ((3547 . 3611) ("
" . -3623) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3624) 3647) nil (25888 59298 285837 962000) 0 nil])
([nil nil ((3485 . 3549) ("
" . -3546) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3547) 3570) nil (25888 59298 285837 443000) 0 nil])
([nil nil ((3422 . 3486) ("
" . -3484) (" (define-key evil-insert-state-map (kbd \"C-V\") 'clipboard-yank)" . 3485) 3508) nil (25888 59298 285836 933000) 0 nil])
([nil nil ((3815 . 3816) ("V" . 3815)) nil (25888 59298 285836 393000) 0 nil])
([nil nil ((3820 . 3839) ("evil-ex-no" . -3820) 3830 (3820 . 3830) ("clipboard-yank" . 3820) 3833) nil (25888 59298 285835 911000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5079 . 5080) (nil fontified nil 4987 . 5080) (4987 . 5080) (4986 . 4987) (t 25876 32719 20624 286000) 4939) nil (25888 59298 285835 324000) 0 nil])
([nil nil (("(setf (lsp-session-folders-blacklist (lsp-session)) nil)
(lsp--persist-session (lsp-session))
" . 4987) 5015 (t 25876 35907 944905 709000)) nil (25888 59298 285834 765000) 0 nil])
([nil nil ((3736 . 3737) (3729 . 3736) ("C-<iso" . 3729) 3734 (t 25876 38089 723609 673000)) nil (25888 59298 285834 272000) 0 nil])
([nil nil (("-lefttab" . 3737) 3744) nil (25888 59298 285833 387000) 0 nil])
([nil nil ((3674 . 3677) ("switch-right" . 3674) 3685 (t 25877 23637 93928 532000)) nil (25888 59298 285832 830000) 0 nil])
([nil nil ((3677 . 3679)) nil (25888 59298 285832 359000) 0 nil])
([nil nil ((apply -3 3681 3762 undo--wrap-and-run-primitive-undo 3681 3762 ((3682 . 3685) 3748))) nil (25888 59298 285832 85000) 0 nil])
([nil nil ((2121 . 2122) ("3" . 2121) (t 25877 42496 713990 857000)) nil (25888 59298 285831 752000) 0 nil])
([nil nil ((2121 . 2122) ("2" . 2121) (2121 . 2122) ("2" . 2121) (t 25878 58229 185598 312000)) nil (25888 59298 285831 269000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6198 . 6199) (nil fontified nil 4979 . 6199) (4979 . 6199) (4978 . 4979) (4977 . 4978) (t 25878 58286 196004 400000) 4977) nil (25888 59298 285830 737000) 0 nil])
([nil nil ((6199 . 6200)) nil (25888 59298 285829 978000) 0 nil])
([nil nil (("
" . 6199) (t 25879 37221 90526 736000)) nil (25888 59298 285829 671000) 0 nil])
([nil nil (("
" . 4977) ("
" . 4978) ("(cl-defmacro lsp-org-babel-enable (lang)
  \"Support LANG in org source code block.\"
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format \"org-babel-edit-prep:%s\" lang)))
         (intern-pre (intern (format \"lsp--%s\" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file \"babel-lsp-\")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format \"Enable lsp-mode in the buffer of org source block (%s).\"
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format \"Prepare local buffer environment for org source block (%s).\"
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '(\"go\" \"python\" \"ipython\" \"bash\" \"sh\"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang))" . 4979) (nil fontified t 6160 . 6161) (nil fontified t 6159 . 6160) (nil fontified t 6140 . 6159) (nil fontified t 6135 . 6140) (nil fontified t 6134 . 6135) (nil fontified t 6133 . 6134) (nil fontified t 6127 . 6133) (nil fontified t 6126 . 6127) (nil fontified t 6125 . 6126) (nil fontified t 6124 . 6125) (nil fontified t 6123 . 6124) (nil fontified t 6119 . 6123) (nil fontified t 6118 . 6119) (nil fontified t 6112 . 6118) (nil fontified t 6111 . 6112) (nil fontified t 6102 . 6111) (nil fontified t 6101 . 6102) (nil fontified t 6093 . 6101) (nil fontified t 6092 . 6093) (nil fontified t 6088 . 6092) (nil fontified t 6087 . 6088) (nil fontified t 6086 . 6087) (nil fontified t 6083 . 6086) (nil fontified t 6064 . 6083) (nil fontified t 6063 . 6064) (nil fontified t 6057 . 6063) (nil fontified t 6056 . 6057) (nil fontified t 6055 . 6056) (nil fontified t 6054 . 6055) (nil fontified t 6053 . 6054) (nil fontified t 6052 . 6053) (nil fontified t 6051 . 6052) (nil fontified t 6050 . 6051) (nil fontified t 6049 . 6050) (nil fontified t 6048 . 6049) (nil fontified t 6047 . 6048) (nil fontified t 6041 . 6047) (nil fontified t 6035 . 6041) (nil fontified t 6034 . 6035) (nil fontified t 6009 . 6034) (nil fontified t 5948 . 6009) (nil fontified t 5947 . 5948) (nil fontified t 5941 . 5947) (nil fontified t 5940 . 5941) (nil fontified t 5923 . 5940) (nil fontified t 5901 . 5923) (nil fontified t 5900 . 5901) (nil fontified t 5890 . 5900) (nil fontified t 5889 . 5890) (nil fontified t 5888 . 5889) (nil fontified t 5885 . 5888) (nil fontified t 5884 . 5885) (nil fontified t 5873 . 5884) (nil fontified t 5872 . 5873) (nil fontified t 5871 . 5872) (nil fontified t 5870 . 5871) (nil fontified t 5854 . 5870) (nil fontified t 5853 . 5854) (nil fontified t 5844 . 5853) (nil fontified t 5839 . 5844) (nil fontified t 5838 . 5839) (nil fontified t 5834 . 5838) (nil fontified t 5833 . 5834) (nil fontified t 5822 . 5833) (nil fontified t 5817 . 5822) (nil fontified t 5816 . 5817) (nil fontified t 5804 . 5816) (nil fontified t 5799 . 5804) (nil fontified t 5798 . 5799) (nil fontified t 5788 . 5798) (nil fontified t 5787 . 5788) (nil fontified t 5776 . 5787) (nil fontified t 5775 . 5776) (nil fontified t 5774 . 5775) (nil fontified t 5768 . 5774) (nil fontified t 5758 . 5768) (nil fontified t 5757 . 5758) (nil fontified t 5756 . 5757) (nil fontified t 5746 . 5756) (nil fontified t 5745 . 5746) (nil fontified t 5733 . 5745) (nil fontified t 5732 . 5733) (nil fontified t 5723 . 5732) (nil fontified t 5722 . 5723) (nil fontified t 5721 . 5722) (nil fontified t 5714 . 5721) (nil fontified t 5713 . 5714) (nil fontified t 5712 . 5713) (nil fontified t 5710 . 5712) (nil fontified t 5709 . 5710) (nil fontified t 5701 . 5709) (nil fontified t 5700 . 5701) (nil fontified t 5699 . 5700) (nil fontified t 5698 . 5699) (nil fontified t 5692 . 5698) (nil fontified t 5686 . 5692) (nil fontified t 5685 . 5686) (nil fontified t 5664 . 5685) (nil fontified t 5607 . 5664) (nil fontified t 5606 . 5607) (nil fontified t 5600 . 5606) (nil fontified t 5599 . 5600) (nil fontified t 5586 . 5599) (nil fontified t 5564 . 5586) (nil fontified t 5563 . 5564) (nil fontified t 5551 . 5563) (nil fontified t 5550 . 5551) (nil fontified t 5549 . 5550) (nil fontified t 5546 . 5549) (nil fontified t 5545 . 5546) (nil fontified t 5537 . 5545) (nil fontified t 5536 . 5537) (nil fontified t 5535 . 5536) (nil fontified t 5534 . 5535) (nil fontified t 5522 . 5534) (nil fontified t 5521 . 5522) (nil fontified t 5509 . 5521) (nil fontified t 5508 . 5509) (nil fontified t 5498 . 5508) (nil fontified t 5482 . 5498) (nil fontified t 5481 . 5482) (nil fontified t 5477 . 5481) (nil fontified t 5476 . 5477) (nil fontified t 5464 . 5476) (nil fontified t 5463 . 5464) (nil fontified t 5462 . 5463) (nil fontified t 5461 . 5462) (nil fontified t 5449 . 5461) (nil fontified t 5448 . 5449) (nil fontified t 5434 . 5448) (nil fontified t 5433 . 5434) (nil fontified t 5422 . 5433) (nil fontified t 5418 . 5422) (nil fontified t 5417 . 5418) (nil fontified t 5393 . 5417) (nil fontified t 5387 . 5393) (nil fontified t 5386 . 5387) (nil fontified t 5374 . 5386) (nil fontified t 5373 . 5374) (nil fontified t 5372 . 5373) (nil fontified t 5371 . 5372) (nil fontified t 5370 . 5371) (nil fontified t 5365 . 5370) (nil fontified t 5364 . 5365) (nil fontified t 5355 . 5364) (nil fontified t 5354 . 5355) (nil fontified t 5342 . 5354) (nil fontified t 5339 . 5342) (nil fontified t 5338 . 5339) (nil fontified t 5328 . 5338) (nil fontified t 5327 . 5328) (nil fontified t 5326 . 5327) (nil fontified t 5325 . 5326) (nil fontified t 5322 . 5325) (nil fontified t 5321 . 5322) (nil fontified t 5311 . 5321) (nil fontified t 5310 . 5311) (nil fontified t 5306 . 5310) (nil fontified t 5305 . 5306) (nil fontified t 5292 . 5305) (nil fontified t 5287 . 5292) (nil fontified t 5286 . 5287) (nil fontified t 5278 . 5286) (nil fontified t 5273 . 5278) (nil fontified t 5272 . 5273) (nil fontified t 5271 . 5272) (nil fontified t 5266 . 5271) (nil fontified t 5265 . 5266) (nil fontified t 5264 . 5265) (nil fontified t 5263 . 5264) (nil fontified t 5262 . 5263) (nil fontified t 5261 . 5262) (nil fontified t 5252 . 5261) (nil fontified t 5241 . 5252) (nil fontified t 5240 . 5241) (nil fontified t 5239 . 5240) (nil fontified t 5230 . 5239) (nil fontified t 5229 . 5230) (nil fontified t 5223 . 5229) (nil fontified t 5222 . 5223) (nil fontified t 5221 . 5222) (nil fontified t 5215 . 5221) (nil fontified t 5214 . 5215) (nil fontified t 5203 . 5214) (nil fontified t 5202 . 5203) (nil fontified t 5192 . 5202) (nil fontified t 5191 . 5192) (nil fontified t 5190 . 5191) (nil fontified t 5189 . 5190) (nil fontified t 5184 . 5189) (nil fontified t 5160 . 5184) (nil fontified t 5159 . 5160) (nil fontified t 5153 . 5159) (nil fontified t 5152 . 5153) (nil fontified t 5151 . 5152) (nil fontified t 5145 . 5151) (nil fontified t 5144 . 5145) (nil fontified t 5135 . 5144) (nil fontified t 5134 . 5135) (nil fontified t 5133 . 5134) (nil fontified t 5132 . 5133) (nil fontified t 5128 . 5132) (nil fontified t 5127 . 5128) (nil fontified t 5124 . 5127) (nil fontified t 5123 . 5124) (nil fontified t 5110 . 5123) (nil fontified t 5097 . 5110) (nil fontified t 5096 . 5097) (nil fontified t 5093 . 5096) (nil fontified t 5092 . 5093) (nil fontified t 5084 . 5092) (nil fontified t 5083 . 5084) (nil fontified t 5070 . 5083) (nil fontified t 5066 . 5070) (nil fontified t 5065 . 5066) (nil fontified t 5062 . 5065) (nil fontified t 5022 . 5062) (nil fontified t 5019 . 5022) (nil fontified t 5018 . 5019) (nil fontified t 5014 . 5018) (nil fontified t 5013 . 5014) (nil fontified t 5012 . 5013) (nil fontified t 4992 . 5012) (nil fontified t 4991 . 4992) (nil fontified t 4980 . 4991) (nil fontified t 4979 . 4980) (nil rear-nonsticky t 6198 . 6199)) nil (25888 59298 285826 131000) 0 nil])
([nil nil (("
" . -4976) 4977 (t 25879 37257 627739 793000)) nil (25888 59298 285810 914000) 0 nil])
([nil nil ((4976 . 4977)) nil (25888 59298 285810 349000) 0 nil])
([nil nil ((2093 . 2099) (" " . -2093) ("L" . -2094) ("G" . -2095) ("S" . -2096) (" " . -2097) 2098 (2088 . 2098) ("JetBrains Mono Nerd Font" . 2088) 2111 (t 25879 37259 14428 31000)) nil (25888 59298 285809 218000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3818 . 3819) ("
" . -3886) (3817 . 3887) 3816 (t 25879 41361 729053 731000)) nil (25888 59298 285807 888000) 0 nil])
([nil nil ((3836 . 3842) ("normal" . 3836) 3841) nil (25888 59298 285807 110000) 0 nil])
([nil nil (("
" . -3955) (3886 . 3956) 3841) nil (25888 59298 285806 615000) 0 nil])
([nil nil ((3906 . 3911) ("r" . -3906) 3907 (3905 . 3907) ("insert" . 3905) 3910) nil (25888 59298 285806 9000) 0 nil])
([nil nil ((3861 . 3864) ("l" . 3861)) nil (25888 59298 285805 323000) 0 nil])
([nil nil ((3932 . 3935) ("P" . -3932) ("S" . -3933) 3934 (3932 . 3934) ("l" . 3932)) nil (25888 59298 285804 918000) 0 nil])
([nil nil (("evil-ex-nohighlight)" . 3868) 3887) nil (25888 59298 285804 249000) 0 nil])
([nil nil ((nil ws-butler-chg delete 3888 . 3889) (3868 . 3888)) nil (25888 59298 285803 891000) 0 nil])
([nil nil ((3868 . 3881) ("+vterm/to" . -3868) 3877 (3868 . 3877) ("_" . -3868) 3869 (3868 . 3869) ("evil-ex-nohighlight" . 3868) 3886) nil (25888 59298 285803 150000) 0 nil])
([nil nil (("
" . -3947) (3882 . 3948) 3880) nil (25888 59298 285801 450000) 0 nil])
([nil nil ((" (define-key evil-normal-state-map (kbd \"C-SPC\") 'evil-ex-nohighlight)
" . 3948) 3949) nil (25888 59298 285800 828000) 0 nil])
([nil nil ((3901 . 3907) ("insert" . 3901) 3906) nil (25888 59298 285800 397000) 0 nil])
([nil nil ((3929 . 3930) (3928 . 3929) (3861 . 3863) (t 25882 24942 576047 466000)) nil (25888 59298 285799 894000) 0 nil])
([nil nil (("S-" . 3861) 3862 (t 25882 26539 954889 18000)) nil (25888 59298 285799 175000) 0 nil])
([nil nil (("S-" . 3926) 3927) nil (25888 59298 285798 465000) 0 nil])
([nil nil ((3926 . 3928) (t 25882 26639 964170 159000)) nil (25888 59298 285797 880000) 0 nil])
([nil nil ((3861 . 3863)) nil (25888 59298 285797 250000) 0 nil])
([nil nil ((5115 . 5128) (5110 . 5115) ("\"" . 5110) (5108 . 5110) (5107 . 5109) ("\"" . -5107) (5099 . 5108) (5098 . 5100) ("(" . -5098) (5098 . 5099) (t 25882 26658 784618 311000)) nil (25888 59298 285796 598000) 0 nil])
([nil nil ((5129 . 5130)) nil (25888 59298 285795 607000) 0 nil])
([nil nil ((5108 . 5109) (t 25882 30690 166321 35000)) nil (25888 59298 285795 91000) 0 nil])
([nil nil (("(sp-pair \"\\<\" nil :actions :rem)
" . 5098) 5109 (t 25882 30826 898889 842000)) nil (25888 59298 285794 272000) 0 nil])
([nil nil ((5098 . 5131)) nil (25888 59298 285793 576000) 0 nil])
([nil nil (("\\" . 5108) (t 25882 30826 898889 842000)) nil (25888 59298 285793 177000) 0 nil])
([nil nil ((5130 . 5136) (t 25882 31073 294613 36000)) nil (25888 59298 285792 812000) 0 nil])
([nil nil (("
thign<" . 5129) 5135) nil (25888 59298 285792 456000) 0 nil])
([nil nil ((5130 . 5136) (5129 . 5130) 5103) nil (25888 59298 285791 972000) 0 nil])
([nil nil (("
thing<" . 5129) 5135) nil (25888 59298 285791 402000) 0 nil])
([nil nil ((5129 . 5130)) nil (25888 59298 285790 894000) 0 nil])
([nil nil ((5112 . 5121) (5111 . 5113) (t 25882 31113 577832 261000)) nil (25888 59298 285790 342000) 0 nil])
([nil nil (("'prog-mode" . 5111) (t 25882 31122 357808 618000)) nil (25888 59298 285789 716000) 0 nil])
([nil nil ((apply -3 5098 5134 undo--wrap-and-run-primitive-undo 5098 5134 ((5098 . 5101) 5111))) nil (25888 59298 285789 19000) 0 nil])
([nil nil ((apply 3 5098 5130 undo--wrap-and-run-primitive-undo 5098 5130 ((";; " . -5098) 5111))) nil (25888 59298 285788 382000) 0 nil])
([nil nil ((5108 . 5109) (t 25882 31368 667293 818000)) nil (25888 59298 285787 857000) 0 nil])
([nil nil ((";; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; start fullscreen
" . 4583) 4593 (t 25882 31414 57224 705000)) nil (25888 59298 285787 9000) 0 nil])
([nil nil ((3410 . 3419) (3409 . 3410) (";" . -3409) (";" . -3410) 3411 ("
" . 3411) (3409 . 3411) (3408 . 3410) 3406) nil (25888 59298 285785 959000) 0 nil])
([nil nil (3418) nil (25888 59298 285784 768000) 0 nil])
([nil nil ((3476 . 3494) (3455 . 3476) (3434 . 3455) (3413 . 3434) (3410 . 3413)) nil (25888 59298 285784 246000) 0 nil])
([nil nil ((3502 . 3503) (":" . -3502) 3503) nil (25888 59298 285783 670000) 0 nil])
([nil nil ((3494 . 3495)) nil (25888 59298 285783 291000) 0 nil])
([nil nil (("y" . -3591) ("y" . -3592) ("p" . -3593) 3594 (3588 . 3594) (3567 . 3588) (3546 . 3567) (3525 . 3546) (3504 . 3525)) nil (25888 59298 285782 786000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4726 . 4727) ("
" . -4908) (4726 . 4909) 4725) nil (25888 59298 285781 623000) 0 nil])
([nil nil ((4813 . 4815) ("N" . -4813) ("D" . -4814) 4815 (4812 . 4815) ("KeyBinds" . 4812) 4819) nil (25888 59298 285780 732000) 0 nil])
([nil nil ((4903 . 4907)) nil (25888 59298 285779 991000) 0 nil])
([nil nil ((4907 . 4908)) nil (25888 59298 285779 526000) 0 nil])
([nil nil ((";;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
" . 2646) 3407 (t 25882 33122 108 803000)) nil (25888 59298 285778 878000) 0 nil])
([nil nil ((";; (set-window-margins (selected-window) 1 1)
;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;; The exceptions to this rule:
;; (setq set-fringe-mode \"0\")
" . 2183) 2457) nil (25888 59298 285778 167000) 0 nil])
([nil nil ((2182 . 2183) 2111) nil (25888 59298 285777 831000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2183 . 2184) ("
" . -2365) (2183 . 2366)) nil (25888 59298 285777 256000) 0 nil])
([nil nil ((2269 . 2274) ("KeyBinds" . 2269) 2276) nil (25888 59298 285776 698000) 0 nil])
([nil nil ((2362 . 2365)) nil (25888 59298 285776 290000) 0 nil])
([nil nil ((";;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
;; (setq user-full-name \"John Doe\"
;;       user-mail-address \"john@doe.com\")


;; doom
;; exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; see 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family \"Fira Code\" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family \"Fira Sans\" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
" . 1) 1560) nil (25888 59298 285775 909000) 0 nil])
([nil nil ((";; (setq catppuccin-flavor 'mocha) ;; 'frappe, 'latte, 'macchiato, or 'mocha
;; (catppuccin-reload)
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
" . 31) 209) nil (25888 59298 285775 514000) 0 nil])
([nil nil (("
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
" . 66) 148) nil (25888 59298 285775 211000) 0 nil])
([nil nil ((" ;; (setq select-enable-clipboard nil)
" . 2069)) nil (25888 59298 285774 853000) 0 nil])
([nil nil ((nil rear-nonsticky nil 228 . 229) ("
" . -266) (227 . 267)) nil (25888 59298 285774 523000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30 . 31) ("
" . -212) (30 . 213) 2) nil (25888 59298 285774 93000) 0 nil])
([nil nil ((";; ################################################################################# Hooks ##########################################################################################
" . 31)) nil (25888 59298 285773 614000) 0 nil])
([nil nil ((1 . 183)) nil (25888 59298 285773 209000) 0 nil])
([nil nil ((86 . 89) ("Hooks" . 86) 90) nil (25888 59298 285772 744000) 0 nil])
([nil nil ((180 . 182)) nil (25888 59298 285772 260000) 0 nil])
([nil nil (("
" . 634) (631 . 634) (630 . 632) 629) nil (25888 59298 285771 929000) 0 nil])
([nil nil (("
" . 980) (977 . 980) (976 . 978) 797) nil (25888 59298 285771 315000) 0 nil])
([nil nil ((" " . -2116) (";" . -2117) (";" . -2118) (" " . -2119) 2120 ("
" . 2120) (2116 . 2120) (2115 . 2117) 2039) nil (25888 59298 285770 647000) 0 nil])
([nil nil ((";" . -2299) (";" . -2300) (" " . -2301) 2302 ("
" . 2302) (2299 . 2302) (2298 . 2300) 2117) nil (25888 59298 285769 808000) 0 nil])
([nil nil ((";;" . 631) 632) nil (25888 59298 285769 150000) 0 nil])
([nil nil ((183 . 184)) nil (25888 59298 285768 630000) 0 nil])
([nil nil ((" " . 977) (" " . 632)) nil (25888 59298 285768 320000) 0 nil])
([nil nil (("
" . 410) (t 25882 33225 370705 573000)) nil (25888 59298 285767 906000) 0 nil])
([nil nil ((" " . -449) (";" . -450) (";" . -451) (" " . -452) 453 ("
" . 453) (449 . 453) (448 . 450)) nil (25888 59298 285767 458000) 0 nil])
([nil nil (("
" . 456) (453 . 456) (453 . 454) (" " . 452) (453 . 454) ("
" . 453) (449 . 453) (448 . 450) (t 25882 33233 867419 250000) 410) nil (25888 59298 285766 732000) 0 nil])
([nil nil ((" " . -453) 455) nil (25888 59298 285766 25000) 0 nil])
([nil nil ((" ;;
;;
" . 449)) nil (25888 59298 285765 688000) 0 nil])
([nil nil ((450 . 452) (449 . 450) 449) nil (25888 59298 285765 376000) 0 nil])
([nil nil ((466 . 481) ("shell-file" . -466) 476 (471 . 476) (465 . 471) ("\"" . 465) (461 . 465) (460 . 462) ("\"" . -460) (453 . 461) (452 . 454) (451 . 453) ("(" . -451) (451 . 452)) nil (25888 59298 285764 719000) 0 nil])
([nil nil ((453 . 457) ("setenv" . 453) 458 (t 25882 33267 450935 623000)) nil (25888 59298 285763 910000) 0 nil])
([nil nil ((473 . 474) (458 . 473) ("shell-file" . -458) 468 (466 . 468) (458 . 466) ("\"zsh\" shell-file-name" . 458) 478) nil (25888 59298 285763 154000) 0 nil])
([nil nil ((" " . -452) 453 (t 25882 33388 764897 153000)) nil (25888 59298 285762 542000) 0 nil])
([nil nil ((474 . 482) (473 . 475) ("\"" . -473) (473 . 474) (" " . -473) 474) nil (25888 59298 285762 30000) 0 nil])
([nil nil ((nil rear-nonsticky nil 484 . 485) ("
" . -518) (484 . 519) 481 (t 25882 33406 384984 550000)) nil (25888 59298 285761 257000) 0 nil])
([nil nil ((489 . 492) ("q" . 489)) nil (25888 59298 285760 799000) 0 nil])
([nil nil (("l" . -500) 501 (500 . 501) ("\"" . 500) (494 . 500) (493 . 495) ("\"" . -493) (493 . 494) ("shell-file-name" . 493) 507) nil (25888 59298 285760 127000) 0 nil])
([nil nil ((501 . 516) ("\"/bin/zsh\"" . 501) 510) nil (25888 59298 285759 285000) 0 nil])
([nil nil ((332 . 339) ("f" . -332) 333 (328 . 333) (" " . -328) 329 (328 . 329) ("o" . -328) 329 (315 . 329) ("MesloLGS NF" . 315) 325 (t 25882 33429 61762 409000)) nil (25888 59298 285758 676000) 0 nil])
([nil nil ((1510 . 1517) ("C-S-SPC" . 1510) 1516 (t 25882 33708 383034 501000)) nil (25888 59298 285757 663000) 0 nil])
([nil nil ((" (define-key evil-normal-state-map (kbd \"C-S-SPC\") '+vterm/toggle)
" . 1536) 1583) nil (25888 59298 285757 249000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1536 . 1537) ("
" . -1602) (1535 . 1603) 1516 (t 25882 34712 971055 56000)) nil (25888 59298 285756 850000) 0 nil])
([nil nil ((1554 . 1560) ("insert" . 1554) 1559) nil (25888 59298 285756 293000) 0 nil])
([nil nil ((1513 . 1515) ("e" . -1513) ("t" . -1514) 1515 (1510 . 1515) ("SPC o t" . 1510) 1516) nil (25888 59298 285755 803000) 0 nil])
([nil nil ((1514 . 1515) ("t" . 1514) (1514 . 1515) ("t" . 1514)) nil (25888 59298 285755 204000) 0 nil])
([nil nil ((1576 . 1580) ("_" . -1576) 1577 (1575 . 1577) ("SPC o t" . 1575) 1581) nil (25888 59298 285754 505000) 0 nil])
([nil nil ((1599 . 1600) 1599 (1598 . 1599) (t 25882 34895 407686 321000) 1579) nil (25888 59298 285753 916000) 0 nil])
([nil nil (("
" . 1600)) nil (25888 59298 285753 386000) 0 nil])
([nil nil (("
" . 1599)) nil (25888 59298 285753 77000) 0 nil])
([nil nil ((1533 . 1534) (t 25882 34905 704355 29000) 1486) nil (25888 59298 285752 777000) 0 nil])
([nil nil (("
" . 1533)) nil (25888 59298 285752 380000) 0 nil])
([nil nil ((1533 . 1534) (t 25882 34905 704355 29000) 1486) nil (25888 59298 285752 59000) 0 nil])
([nil nil (("
" . 1533)) nil (25888 59298 285751 630000) 0 nil])
([nil nil ((1599 . 1600) (t 25882 34905 704355 29000)) nil (25888 59298 285751 343000) 0 nil])
([nil nil ((1600 . 1601)) nil (25888 59298 285750 988000) 0 nil])
([nil nil (("
" . 1598) ("
" . 1599)) nil (25888 59298 285750 657000) 0 nil])
([nil nil ((1575 . 1582) ("C_" . 1575) (1576 . 1577) ("-RET" . 1576)) nil (25888 59298 285750 258000) 0 nil])
([nil nil ((1514 . 1515) ("t" . 1514) (1514 . 1515) ("T" . 1514)) nil (25888 59298 285749 641000) 0 nil])
([nil nil ((1510 . 1517) ("C-Ret" . 1510) (1513 . 1515) ("Et" . 1513)) nil (25888 59298 285749 127000) 0 nil])
([nil nil ((1554 . 1560) ("normal" . 1554)) nil (25888 59298 285748 632000) 0 nil])
([nil nil (("
 (define-key evil-insert-state-map (kbd \"SPC o t\") '+vterm/toggle)
" . 1535) (1602 . 1603) (nil rear-nonsticky t 1536 . 1537)) nil (25888 59298 285748 224000) 0 nil])
([nil nil ((1536 . 1603)) nil (25888 59298 285747 775000) 0 nil])
([nil nil ((1510 . 1517) ("SPC o t" . 1510)) nil (25888 59298 285746 951000) 0 nil])
([nil nil ((897 . 903) (894 . 897) (" " . -894) (894 . 895) ("'" . -894) (892 . 895) (887 . 892) ("p" . -887) ("p" . -888) ("-" . -889) ("m" . -890) 891 (887 . 891) ("-" . -887) ("m" . -888) ("o" . -889) ("d" . -890) 891 (886 . 891) ("c" . -886) 887 (885 . 887) (" " . -885) (885 . 886) ("'" . -885) (881 . 886) (876 . 881) (875 . 877) ("(" . -875) (875 . 876) (874 . 875) (873 . 874) (t 25882 34921 151025 487000) 872) nil (25888 59298 285745 706000) 0 nil])
([nil nil (("(add-hook 'c-mode #'lsp-mode)
" . 875) 895 (t 25884 16484 209010 637000)) nil (25888 59298 285743 720000) 0 nil])
([nil nil (("
" . 875)) nil (25888 59298 285743 287000) 0 nil])
([nil nil ((2428 . 2436) ("maximized" . 2428) 2436 (t 25884 16574 500465 32000)) nil (25888 59298 285742 828000) 0 nil])
([nil nil (("(sp-pair \"\\<\"  nil :actions :rem)
" . 2439) 2471 (t 25884 23630 351594 800000)) nil (25888 59298 285742 157000) 0 nil])
([nil nil ((" ;; (define-key evil-normal-state-map (kbd \"M-l\") 'evil-window-right)
 ;; (define-key evil-normal-state-map (kbd \"M-h\") 'evil-window-left)
 ;; (define-key evil-normal-state-map (kbd \"M-k\") 'evil-window-up)
 ;; (define-key evil-normal-state-map (kbd \"M-j\") 'evil-window-down)
 ;; (define-key evil-normal-state-map (kbd \"M-RET\") '+evil/window-vsplit-and-follow)
 ;; (define-key evil-normal-state-map (kbd \"M-SPC\") '+evil/window-split-and-follow)
 ;; (define-key evil-normal-state-map (kbd \"SPC v\") 'clipboard-yank)
 ;; (define-key evil-normal-state-map (kbd \"SPC y\") 'clipboard-kill-ring-save)
" . 1603) (undo-tree-id818 . -513) (undo-tree-id819 . -513) (undo-tree-id820 . -513) (undo-tree-id821 . -591) 2116 (t 25884 23669 9663 612000)) nil (25888 59298 285741 539000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1603 . 1604) ("
" . -1669) (1602 . 1670) 1536) nil (25888 59298 285739 530000) 0 nil])
([nil nil (("
" . -1736) (1669 . 1737) 1604) nil (25888 59298 285738 779000) 0 nil])
([nil nil ((1621 . 1626) ("normal" . 1621) (undo-tree-id814 . -5) (undo-tree-id815 . -5) (undo-tree-id816 . -5) (undo-tree-id817 . -5) 1626) nil (25888 59298 285737 959000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1627 . 1628) (1621 . 1627) ("inser" . 1621) (undo-tree-id813 . -4)) nil (25888 59298 285732 266000) 0 nil])
([nil nil ((1644 . 1645) ("C-S-SPC" . 1644) (undo-tree-id808 . -6) (undo-tree-id809 . -6) (undo-tree-id810 . -6) (undo-tree-id811 . -1) (undo-tree-id812 . -6) 1650) nil (25888 59298 285730 164000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1651 . 1652) (1644 . 1651) ("x" . 1644)) nil (25888 59298 285723 77000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1645 . 1646) (1644 . 1645) ("C-S-SPC" . 1644) (undo-tree-id785 . -6) (undo-tree-id786 . -6) (undo-tree-id787 . -6) (undo-tree-id788 . -1) (undo-tree-id789 . -6) (undo-tree-id790 . -6) (undo-tree-id791 . -6) (undo-tree-id792 . -6) (undo-tree-id793 . -6) (undo-tree-id794 . -6) (undo-tree-id795 . -6) (undo-tree-id796 . -6) (undo-tree-id797 . -6) (undo-tree-id798 . -6) (undo-tree-id799 . -6) (undo-tree-id800 . -6) (undo-tree-id801 . -6) (undo-tree-id802 . -6) (undo-tree-id803 . -6) (undo-tree-id804 . -6) (undo-tree-id805 . -6) (undo-tree-id806 . -6) (undo-tree-id807 . -6) (nil ws-butler-chg nil 1651 . 1652)) nil (25888 59298 285721 666000) 0 nil])
([nil nil (("+vterm/toggle" . 1649) (undo-tree-id719 . -12) (undo-tree-id720 . -12) (undo-tree-id721 . -12) (undo-tree-id722 . -5) (undo-tree-id723 . -5) (undo-tree-id724 . -5) (undo-tree-id725 . -5) (undo-tree-id726 . -5) (undo-tree-id727 . -5) (undo-tree-id728 . -5) (undo-tree-id729 . -5) (undo-tree-id730 . -5) (undo-tree-id731 . -5) (undo-tree-id732 . -5) (undo-tree-id733 . -5) (undo-tree-id734 . -5) (undo-tree-id735 . -5) (undo-tree-id736 . -5) (undo-tree-id737 . -5) (undo-tree-id738 . -6) (undo-tree-id739 . -5) (undo-tree-id740 . -6) (undo-tree-id741 . -6) (undo-tree-id742 . -6) (undo-tree-id743 . -6) (undo-tree-id744 . -6) (undo-tree-id745 . -6) (undo-tree-id746 . -6) (undo-tree-id747 . -6) (undo-tree-id748 . -6) (undo-tree-id749 . -6) (undo-tree-id750 . -6) (undo-tree-id751 . -6) (undo-tree-id752 . -6) (undo-tree-id753 . -6) (undo-tree-id754 . -6) (undo-tree-id755 . -12) (undo-tree-id756 . -6) (undo-tree-id757 . -12) (undo-tree-id758 . -12) (undo-tree-id759 . -12) (undo-tree-id760 . -12) (undo-tree-id761 . -12) (undo-tree-id762 . -12) (undo-tree-id763 . -12) (undo-tree-id764 . -12) (undo-tree-id765 . -12) (undo-tree-id766 . -12) (undo-tree-id767 . -12) (undo-tree-id768 . -12) (undo-tree-id769 . -12) (undo-tree-id770 . -12) (undo-tree-id771 . -12) (undo-tree-id772 . -12) (undo-tree-id773 . -12) (undo-tree-id774 . -12) (undo-tree-id775 . -12) (undo-tree-id776 . -12) (undo-tree-id777 . -12) (undo-tree-id778 . -12) (undo-tree-id779 . -12) (undo-tree-id780 . -12) (undo-tree-id781 . -12) (undo-tree-id782 . -12) (undo-tree-id783 . -13) (undo-tree-id784 . -13) 1661) nil (25888 59298 285703 991000) 0 nil])
([nil nil ((nil ws-butler-chg delete 1662 . 1663) (1649 . 1662)) nil (25888 59298 285670 461000) 0 nil])
([nil nil ((apply -3 1603 1667 undo--wrap-and-run-primitive-undo 1603 1667 ((1604 . 1607)))) nil (25888 59298 285670 31000) 0 nil])
([nil nil ((903 . 917) ("undo-tree" . -903) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -2) (undo-tree-id443 . -1) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -2) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -3) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -5) (undo-tree-id573 . -5) (undo-tree-id574 . -5) (undo-tree-id575 . -5) (undo-tree-id576 . -5) (undo-tree-id577 . -5) (undo-tree-id578 . -5) (undo-tree-id579 . -5) (undo-tree-id580 . -4) (undo-tree-id581 . -5) (undo-tree-id582 . -5) (undo-tree-id583 . -5) (undo-tree-id584 . -5) (undo-tree-id585 . -5) (undo-tree-id586 . -5) (undo-tree-id587 . -5) (undo-tree-id588 . -5) (undo-tree-id589 . -5) (undo-tree-id590 . -5) (undo-tree-id591 . -5) (undo-tree-id592 . -5) (undo-tree-id593 . -5) (undo-tree-id594 . -5) (undo-tree-id595 . -5) (undo-tree-id596 . -5) (undo-tree-id597 . -5) (undo-tree-id598 . -5) (undo-tree-id599 . -5) (undo-tree-id600 . -5) (undo-tree-id601 . -5) (undo-tree-id602 . -6) (undo-tree-id603 . -6) (undo-tree-id604 . -6) (undo-tree-id605 . -6) (undo-tree-id606 . -6) (undo-tree-id607 . -6) (undo-tree-id608 . -6) (undo-tree-id609 . -6) (undo-tree-id610 . -5) (undo-tree-id611 . -6) (undo-tree-id612 . -6) (undo-tree-id613 . -6) (undo-tree-id614 . -6) (undo-tree-id615 . -6) (undo-tree-id616 . -6) (undo-tree-id617 . -6) (undo-tree-id618 . -6) (undo-tree-id619 . -6) (undo-tree-id620 . -6) (undo-tree-id621 . -6) (undo-tree-id622 . -6) (undo-tree-id623 . -6) (undo-tree-id624 . -6) (undo-tree-id625 . -6) (undo-tree-id626 . -6) (undo-tree-id627 . -6) (undo-tree-id628 . -6) (undo-tree-id629 . -6) (undo-tree-id630 . -6) (undo-tree-id631 . -6) (undo-tree-id632 . -7) (undo-tree-id633 . -7) (undo-tree-id634 . -7) (undo-tree-id635 . -7) (undo-tree-id636 . -7) (undo-tree-id637 . -7) (undo-tree-id638 . -7) (undo-tree-id639 . -7) (undo-tree-id640 . -6) (undo-tree-id641 . -7) (undo-tree-id642 . -7) (undo-tree-id643 . -7) (undo-tree-id644 . -7) (undo-tree-id645 . -7) (undo-tree-id646 . -7) (undo-tree-id647 . -7) (undo-tree-id648 . -8) (undo-tree-id649 . -8) (undo-tree-id650 . -8) (undo-tree-id651 . -8) (undo-tree-id652 . -8) (undo-tree-id653 . -8) (undo-tree-id654 . -8) (undo-tree-id655 . -8) (undo-tree-id656 . -7) (undo-tree-id657 . -8) (undo-tree-id658 . -8) (undo-tree-id659 . -8) (undo-tree-id660 . -8) (undo-tree-id661 . -8) (undo-tree-id662 . -8) (undo-tree-id663 . -8) (undo-tree-id664 . -8) (undo-tree-id665 . -8) (undo-tree-id666 . -8) (undo-tree-id667 . -8) (undo-tree-id668 . -8) (undo-tree-id669 . -8) (undo-tree-id670 . -8) (undo-tree-id671 . -8) (undo-tree-id672 . -8) (undo-tree-id673 . -8) (undo-tree-id674 . -8) (undo-tree-id675 . -8) (undo-tree-id676 . -8) (undo-tree-id677 . -8) (undo-tree-id678 . -9) (undo-tree-id679 . -9) (undo-tree-id680 . -9) (undo-tree-id681 . -9) (undo-tree-id682 . -9) (undo-tree-id683 . -9) (undo-tree-id684 . -9) (undo-tree-id685 . -9) (undo-tree-id686 . -8) (undo-tree-id687 . -9) (undo-tree-id688 . -9) (undo-tree-id689 . -9) (undo-tree-id690 . -9) (undo-tree-id691 . -9) (undo-tree-id692 . -9) (undo-tree-id693 . -9) (undo-tree-id694 . -9) (undo-tree-id695 . -9) (undo-tree-id696 . -9) (undo-tree-id697 . -9) (undo-tree-id698 . -9) (undo-tree-id699 . -9) (undo-tree-id700 . -9) (undo-tree-id701 . -9) (undo-tree-id702 . -9) (undo-tree-id703 . -9) (undo-tree-id704 . -9) (undo-tree-id705 . -9) (undo-tree-id706 . -9) (undo-tree-id707 . -9) (undo-tree-id708 . -9) (undo-tree-id709 . -9) (undo-tree-id710 . -9) (undo-tree-id711 . -9) (undo-tree-id712 . -9) (undo-tree-id713 . -9) (undo-tree-id714 . -9) (undo-tree-id715 . -9) (undo-tree-id716 . -9) (undo-tree-id717 . -9) (undo-tree-id718 . -9) 912 (902 . 912) (" " . -902) (902 . 903) ("'" . -902) (896 . 903) (885 . 896) (" " . -885) (885 . 886) ("'" . -885) (876 . 886) (875 . 877) ("(" . -875) (875 . 876) (874 . 875) (873 . 874) (t 25887 24 147465 848000) 822) nil (25888 59298 285664 998000) 0 nil])
([nil nil ((#("(add-hook 'prog-mode-hook #'undo-tree-mode)
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 9 (face font-lock-constant-face fontified t) 9 10 (fontified t) 10 11 (face highlight-quoted-quote fontified t) 11 25 (face font-lock-variable-name-face fontified t) 25 26 (fontified t) 26 28 (face highlight-quoted-quote fontified t) 28 42 (face font-lock-variable-name-face fontified t) 42 43 (face (rainbow-delimiters-depth-1-face) fontified t) 43 44 (fontified t)) . 875) (undo-tree-id1 . -28) (undo-tree-id2 . -28) (undo-tree-id3 . -28) (undo-tree-id4 . -28) (undo-tree-id5 . -28) (undo-tree-id6 . -28) (undo-tree-id7 . -28) (undo-tree-id8 . -28) (undo-tree-id9 . -28) (undo-tree-id10 . -28) (undo-tree-id11 . -28) (undo-tree-id12 . -28) (undo-tree-id13 . -28) (undo-tree-id14 . -28) (undo-tree-id15 . -28) (undo-tree-id16 . -28) (undo-tree-id17 . -28) (undo-tree-id18 . -28) (undo-tree-id19 . -28) (undo-tree-id20 . -28) (undo-tree-id21 . -28) (undo-tree-id22 . -28) (undo-tree-id23 . -28) (undo-tree-id24 . -28) (undo-tree-id25 . -28) (undo-tree-id26 . -28) (undo-tree-id27 . -28) (undo-tree-id28 . -28) (undo-tree-id29 . -28) (undo-tree-id30 . -28) (undo-tree-id31 . -28) (undo-tree-id32 . -28) (undo-tree-id33 . -28) (undo-tree-id34 . -28) (undo-tree-id35 . -28) (undo-tree-id36 . -28) (undo-tree-id37 . -28) (undo-tree-id38 . -28) (undo-tree-id39 . -28) (undo-tree-id40 . -28) (undo-tree-id41 . -28) (undo-tree-id42 . -28) (undo-tree-id43 . -28) (undo-tree-id44 . -28) (undo-tree-id45 . -28) (undo-tree-id46 . -28) (undo-tree-id47 . -28) (undo-tree-id48 . -28) (undo-tree-id49 . -28) (undo-tree-id50 . -28) (undo-tree-id51 . -28) (undo-tree-id52 . -28) (undo-tree-id53 . -28) (undo-tree-id54 . -28) (undo-tree-id55 . -28) (undo-tree-id56 . -28) (undo-tree-id57 . -28) (undo-tree-id58 . -28) (undo-tree-id59 . -28) (undo-tree-id60 . -28) (undo-tree-id61 . -28) (undo-tree-id62 . -28) (undo-tree-id63 . -28) (undo-tree-id64 . -28) (undo-tree-id65 . -28) (undo-tree-id66 . -28) (undo-tree-id67 . -28) (undo-tree-id68 . -28) (undo-tree-id69 . -28) (undo-tree-id70 . -28) (undo-tree-id71 . -28) (undo-tree-id72 . -28) (undo-tree-id73 . -28) (undo-tree-id74 . -28) (undo-tree-id75 . -28) (undo-tree-id76 . -28) (undo-tree-id77 . -28) (undo-tree-id78 . -28) (undo-tree-id79 . -28) (undo-tree-id80 . -28) (undo-tree-id81 . -28) (undo-tree-id82 . -28) (undo-tree-id83 . -28) (undo-tree-id84 . -28) (undo-tree-id85 . -28) (undo-tree-id86 . -28) (undo-tree-id87 . -28) (undo-tree-id88 . -28) (undo-tree-id89 . -28) (undo-tree-id90 . -28) (undo-tree-id91 . -28) (undo-tree-id92 . -28) (undo-tree-id93 . -28) (undo-tree-id94 . -28) (undo-tree-id95 . -28) (undo-tree-id96 . -28) (undo-tree-id97 . -28) (undo-tree-id98 . -28) (undo-tree-id99 . -28) (undo-tree-id100 . -28) (undo-tree-id101 . -28) (undo-tree-id102 . -28) (undo-tree-id103 . -28) (undo-tree-id104 . -28) (undo-tree-id105 . -28) (undo-tree-id106 . -28) (undo-tree-id107 . -28) (undo-tree-id108 . -28) (undo-tree-id109 . -28) (undo-tree-id110 . -28) (undo-tree-id111 . -28) (undo-tree-id112 . -28) (undo-tree-id113 . -28) (undo-tree-id114 . -28) (undo-tree-id115 . -28) (undo-tree-id116 . -28) (undo-tree-id117 . -28) (undo-tree-id118 . -28) (undo-tree-id119 . -28) (undo-tree-id120 . -28) (undo-tree-id121 . -28) (undo-tree-id122 . -28) (undo-tree-id123 . -28) (undo-tree-id124 . -28) (undo-tree-id125 . -28) (undo-tree-id126 . -28) (undo-tree-id127 . -28) (undo-tree-id128 . -28) (undo-tree-id129 . -28) (undo-tree-id130 . -28) (undo-tree-id131 . -28) (undo-tree-id132 . -28) (undo-tree-id133 . -28) (undo-tree-id134 . -28) (undo-tree-id135 . -28) (undo-tree-id136 . -28) (undo-tree-id137 . -28) (undo-tree-id138 . -28) (undo-tree-id139 . -28) (undo-tree-id140 . -28) (undo-tree-id141 . -28) (undo-tree-id142 . -28) (undo-tree-id143 . -28) (undo-tree-id144 . -28) (undo-tree-id145 . -28) (undo-tree-id146 . -28) (undo-tree-id147 . -28) (undo-tree-id148 . -28) (undo-tree-id149 . -28) (undo-tree-id150 . -28) (undo-tree-id151 . -28) (undo-tree-id152 . -28) (undo-tree-id153 . -28) (undo-tree-id154 . -28) (undo-tree-id155 . -28) (undo-tree-id156 . -28) (undo-tree-id157 . -28) (undo-tree-id158 . -28) (undo-tree-id159 . -28) (undo-tree-id160 . -28) (undo-tree-id161 . -28) (undo-tree-id162 . -28) (undo-tree-id163 . -28) (undo-tree-id164 . -28) (undo-tree-id165 . -28) (undo-tree-id166 . -28) (undo-tree-id167 . -28) (undo-tree-id168 . -28) (undo-tree-id169 . -28) (undo-tree-id170 . -28) (undo-tree-id171 . -28) (undo-tree-id172 . -28) (undo-tree-id173 . -28) (undo-tree-id174 . -28) (undo-tree-id175 . -28) (undo-tree-id176 . -28) (undo-tree-id177 . -28) (undo-tree-id178 . -28) (undo-tree-id179 . -28) (undo-tree-id180 . -28) (undo-tree-id181 . -28) (undo-tree-id182 . -28) (undo-tree-id183 . -28) (undo-tree-id184 . -28) (undo-tree-id185 . -28) (undo-tree-id186 . -28) (undo-tree-id187 . -28) (undo-tree-id188 . -28) (undo-tree-id189 . -28) (undo-tree-id190 . -28) (undo-tree-id191 . -28) (undo-tree-id192 . -28) (undo-tree-id193 . -28) (undo-tree-id194 . -28) (undo-tree-id195 . -28) (undo-tree-id196 . -28) (undo-tree-id197 . -28) (undo-tree-id198 . -28) (undo-tree-id199 . -28) (undo-tree-id200 . -28) (undo-tree-id201 . -28) (undo-tree-id202 . -28) (undo-tree-id203 . -28) (undo-tree-id204 . -28) (undo-tree-id205 . -28) (undo-tree-id206 . -28) (undo-tree-id207 . -28) (undo-tree-id208 . -28) (undo-tree-id209 . -28) (undo-tree-id210 . -28) (undo-tree-id211 . -28) (undo-tree-id212 . -28) (undo-tree-id213 . -28) (undo-tree-id214 . -28) (undo-tree-id215 . -28) (undo-tree-id216 . -28) (undo-tree-id217 . -28) (undo-tree-id218 . -28) (undo-tree-id219 . -28) (undo-tree-id220 . -28) (undo-tree-id221 . -28) (undo-tree-id222 . -28) (undo-tree-id223 . -28) (undo-tree-id224 . -28) (undo-tree-id225 . -28) (undo-tree-id226 . -28) (undo-tree-id227 . -28) (undo-tree-id228 . -28) (undo-tree-id229 . -28) (undo-tree-id230 . -28) (undo-tree-id231 . -28) (undo-tree-id232 . -28) (undo-tree-id233 . -28) (undo-tree-id234 . -28) (undo-tree-id235 . -28) (undo-tree-id236 . -28) (undo-tree-id237 . -28) (undo-tree-id238 . -28) (undo-tree-id239 . -28) (undo-tree-id240 . -28) (undo-tree-id241 . -28) (undo-tree-id242 . -28) (undo-tree-id243 . -28) (undo-tree-id244 . -28) (undo-tree-id245 . -28) (undo-tree-id246 . -28) (undo-tree-id247 . -28) (undo-tree-id248 . -28) (undo-tree-id249 . -28) (undo-tree-id250 . -28) (undo-tree-id251 . -28) (undo-tree-id252 . -28) (undo-tree-id253 . -28) (undo-tree-id254 . -28) (undo-tree-id255 . -28) (undo-tree-id256 . -28) (undo-tree-id257 . -28) (undo-tree-id258 . -28) (undo-tree-id259 . -28) (undo-tree-id260 . -28) (undo-tree-id261 . -28) (undo-tree-id262 . -28) (undo-tree-id263 . -28) (undo-tree-id264 . -28) (undo-tree-id265 . -28) (undo-tree-id266 . -28) (undo-tree-id267 . -28) (undo-tree-id268 . -28) (undo-tree-id269 . -28) (undo-tree-id270 . -28) (undo-tree-id271 . -28) (undo-tree-id272 . -28) (undo-tree-id273 . -28) (undo-tree-id274 . -28) (undo-tree-id275 . -28) (undo-tree-id276 . -28) (undo-tree-id277 . -28) (undo-tree-id278 . -28) (undo-tree-id279 . -28) (undo-tree-id280 . -28) (undo-tree-id281 . -28) (undo-tree-id282 . -28) (undo-tree-id283 . -28) (undo-tree-id284 . -28) (undo-tree-id285 . -28) (undo-tree-id286 . -28) (undo-tree-id287 . -28) (undo-tree-id288 . -28) (undo-tree-id289 . -28) (undo-tree-id290 . -28) (undo-tree-id291 . -28) (undo-tree-id292 . -28) (undo-tree-id293 . -28) (undo-tree-id294 . -42) (undo-tree-id295 . -28) (undo-tree-id296 . -28) (undo-tree-id297 . -28) (undo-tree-id298 . -28) (undo-tree-id299 . -28) (undo-tree-id300 . -42) (undo-tree-id301 . -42) (undo-tree-id302 . -42) (undo-tree-id303 . -42) (undo-tree-id304 . -42) (undo-tree-id305 . -42) (undo-tree-id306 . -42) (undo-tree-id307 . -42) (undo-tree-id308 . -42) (undo-tree-id309 . -42) (undo-tree-id310 . -42) (undo-tree-id311 . -42) (undo-tree-id312 . -42) (undo-tree-id313 . -42) (undo-tree-id314 . -42) (undo-tree-id315 . -42) (undo-tree-id316 . -42) (undo-tree-id317 . -42) (undo-tree-id318 . -42) (undo-tree-id319 . -42) (undo-tree-id320 . -42) (undo-tree-id321 . -44) (undo-tree-id322 . -42) (undo-tree-id323 . -44) (undo-tree-id324 . -44) (undo-tree-id325 . -44) (undo-tree-id326 . -44) (undo-tree-id327 . -44) (undo-tree-id328 . -44) (undo-tree-id329 . -44) (undo-tree-id330 . -44) (undo-tree-id331 . -44) (undo-tree-id332 . -44) (undo-tree-id333 . -44) (undo-tree-id334 . -44) (undo-tree-id335 . -44) (undo-tree-id336 . -44) (undo-tree-id337 . -44) (undo-tree-id338 . -42) (undo-tree-id339 . -44) (undo-tree-id340 . -42) (undo-tree-id341 . -42) (undo-tree-id342 . -42) (undo-tree-id343 . -42) (undo-tree-id344 . -42) (undo-tree-id345 . -42) (undo-tree-id346 . -42) (undo-tree-id347 . -42) (undo-tree-id348 . -42) (undo-tree-id349 . -42) (undo-tree-id350 . -42) (undo-tree-id351 . -42) (undo-tree-id352 . -42) (undo-tree-id353 . -42) (undo-tree-id354 . -42) (undo-tree-id355 . -44) (undo-tree-id356 . -42) (undo-tree-id357 . -44) (undo-tree-id358 . -44) (undo-tree-id359 . -44) (undo-tree-id360 . -44) (undo-tree-id361 . -44) (undo-tree-id362 . -44) (undo-tree-id363 . -44) (undo-tree-id364 . -44) (undo-tree-id365 . -44) (undo-tree-id366 . -44) (undo-tree-id367 . -44) (undo-tree-id368 . -44) (undo-tree-id369 . -44) (undo-tree-id370 . -44) (undo-tree-id371 . -44) (undo-tree-id372 . -42) (undo-tree-id373 . -44) (undo-tree-id374 . -42) (undo-tree-id375 . -42) (undo-tree-id376 . -42) (undo-tree-id377 . -42) (undo-tree-id378 . -42) (undo-tree-id379 . -42) (undo-tree-id380 . -42) (undo-tree-id381 . -42) (undo-tree-id382 . -42) (undo-tree-id383 . -42) (undo-tree-id384 . -42) (undo-tree-id385 . -42) (undo-tree-id386 . -42) (undo-tree-id387 . -42) (undo-tree-id388 . -42) (undo-tree-id389 . -42) (undo-tree-id390 . -42) (undo-tree-id391 . -42) (undo-tree-id392 . -42) (undo-tree-id393 . -42) (undo-tree-id394 . -42) (undo-tree-id395 . -42) (undo-tree-id396 . -42) (undo-tree-id397 . -42) (undo-tree-id398 . -42) (undo-tree-id399 . -42) (undo-tree-id400 . -42) (undo-tree-id401 . -42) (undo-tree-id402 . -42) (undo-tree-id403 . -42) (undo-tree-id404 . -42) (undo-tree-id405 . -42) (undo-tree-id406 . -42) (undo-tree-id407 . -42) (undo-tree-id408 . -42) (undo-tree-id409 . -42) (undo-tree-id410 . -42) (undo-tree-id411 . -42) (undo-tree-id412 . -42) (undo-tree-id413 . -42) (undo-tree-id414 . -42) (undo-tree-id415 . -42) (undo-tree-id416 . -42) (undo-tree-id417 . -44) (undo-tree-id418 . -43) 917 (t 25888 44416 709917 970000)) nil (25888 59298 285545 426000) 0 nil])
([nil current ((#("
" 0 1 (ws-butler-chg delete fontified t)) . 875) (undo-tree-id0 . -1)) nil (25888 59298 285272 60000) 0 nil])
nil
